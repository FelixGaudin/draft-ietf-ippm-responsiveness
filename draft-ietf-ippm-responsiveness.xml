<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.6.10) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-ietf-ippm-responsiveness-01" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Responsiveness under Working Conditions">Responsiveness under Working Conditions</title>

    <author initials="C." surname="Paasch" fullname="Christoph Paasch">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cpaasch@apple.com</email>
      </address>
    </author>
    <author initials="R." surname="Meyer" fullname="Randall Meyer">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>rrm@apple.com</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="O." surname="Shapira" fullname="Omer Shapira">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>oesh@apple.com</email>
      </address>
    </author>
    <author initials="W." surname="Hawkins" fullname="Will Hawkins">
      <organization>University of Cincinnati</organization>
      <address>
        <email>hawkinwh@ucmail.uc.edu</email>
      </address>
    </author>
    <author initials="M." surname="Mathis" fullname="Matt Mathis">
      <organization>Google, Inc</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View, CA  94043</city>
          <country>United States of America</country>
        </postal>
        <email>mattmathis@google.com</email>
      </address>
    </author>

    <date year="2023" month="March" day="13"/>

    <area>Transport</area>
    <workgroup>IP Performance Measurement</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>For many years, a lack of responsiveness, variously called
lag, latency, or bufferbloat, has been recognized
as an unfortunate, but common, symptom in today's networks.
Even after a decade of work on standardizing technical solutions,
it remains a common problem for the end users.</t>

<t>Everyone "knows" that it is "normal" for a video conference to
have problems when somebody else at home is
watching a 4K movie or uploading photos from their phone.
However, there is no technical reason for this to be the case.
In fact, various queue management solutions (fq_codel, cake, PIE)
have solved the problem.</t>

<t>Our networks remain unresponsive, not from a lack of technical solutions,
but rather a lack of awareness of the problem and its solutions.
We believe that creating a tool whose measurement matches people's
everyday experience will create the necessary awareness,
and result in a demand for products that solve the problem.</t>

<t>This document specifies the "Responsiveness Test" for measuring responsiveness.
It uses common protocols and mechanisms to measure user
experience specifically when the network is under working conditions.
The measurement is expressed as "Round-trips Per Minute" (RPM)
and should be included with throughput (up and down) and
idle latency as critical indicators of network quality.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>For many years, a lack of responsiveness, variously called
lag, latency, or bufferbloat, has been recognized
as an unfortunate, but common, symptom in today's networks <xref target="Bufferbloat"/>.
Solutions like fq_codel <xref target="RFC8290"/> or PIE <xref target="RFC8033"/> have been standardized
and are to some extent widely implemented.
Nevertheless, people still suffer from bufferbloat.</t>

<t>Although significant, the impact on user experience can be transitory --
that is, its effect is not always visible to the user.
Whenever a network is actively being used at its full capacity,
buffers can fill up and create latency for traffic.
The duration of those full buffers may be brief:
a medium-sized file transfer, like an email attachment
or uploading photos,
can create bursts of latency spikes.
An example of this is lag occurring during a videoconference,
where a connection is briefly shown as unstable.</t>

<t>These short-lived disruptions make it hard to narrow down the cause.
We believe that it is necessary to create a standardized way to
measure and express responsiveness.</t>

<t>Existing network measurement tools could incorporate a
responsiveness measurement into their set of metrics.
Doing so would also raise the awareness of the problem and
would help establish a new expectation
that the standard measures of network quality should
-- in addition to throughput and idle latency --
also include latency under load, or, as we prefer to call it,
responsiveness under working conditions.</t>

<section anchor="terminology"><name>Terminology</name>

<t>A word about the term "bufferbloat" -- the undesirable latency
that comes from a router or other network equipment
buffering too much data.
This document uses the term as a general description of bad latency,
using more precise wording where warranted.</t>

<t>"Latency" is a poor measure of responsiveness,
since it can be hard for the general public to understand.
The units are unfamiliar ("what is a millisecond?") and
counterintuitive ("100 msec -- that sounds good --
it's only a tenth of a second!").</t>

<t>Instead, we create the term "Responsiveness under working conditions"
to make it clear that we are measuring all, not just idle, conditions,
and use "round-trips per minute" as the unit.
The advantage of round-trips per minute are two-fold: First, it allows for a unit
that is "the higher the better". This kind of unit is often more intuitive for end-users.
Second, the range of the values tends to be around the 4-digit integer range which
is also a value easy to compare and read, again allowing for a more intuitive use.
Finally, we abbreviate the unit to "RPM", a wink to the
"revolutions per minute" that we use for car engines.</t>

<t>This document defines an algorithm for the "Responsiveness Test"
that explicitly measures responsiveness under working conditions.</t>

</section>
</section>
<section anchor="design-constraints"><name>Design Constraints</name>

<t>There are many challenges around measurements on the Internet.
They include the dynamic nature of the Internet,
the diverse nature of the traffic,
the large number of devices that affect traffic,
and the difficulty of attaining appropriate measurement conditions.</t>

<t>Internet paths are changing all the time.
Daily fluctuations in the demand make the bottlenecks ebb and flow.
To minimize the variability of routing changes,
it's best to keep the test duration relatively short.</t>

<t>TCP and UDP traffic, or traffic on ports 80 and 443, may take
significantly different paths on the Internet and
be subject to entirely different Quality of Service (QoS) treatment.
A good test will use standard transport-layer traffic -- typical
for people's use of the network --
that is subject to the transport's congestion control that might
reduce the traffic's rate and thus its buffering in the network.</t>

<t>Traditionally, one thinks of bufferbloat happening on the
routers and switches of the Internet.
However, the networking stacks of the clients and servers can
have huge buffers.
Data sitting in TCP sockets or waiting for the application
to send or read causes artificial latency, and affects user experience
the same way as "traditional" bufferbloat.</t>

<t>Finally, it is crucial to recognize that significant
queueing only happens on entry to the lowest-capacity
(or “bottleneck”) hop on a network path.
For any flow of data between two communicating devices,
there is always one hop along the path where the capacity
available to that flow at that hop is the lowest among
all the hops of that flow’s path at that moment in time.
It is important to understand that the existence of a
lowest-capacity hop on a network path is not itself a problem.
In a heterogeneous network like the Internet it is
inevitable that there must necessarily be some hop
along the path with the lowest capacity for that path.
If that hop were to be improved to make it no longer
the lowest-capacity hop, then some other hop would
become the new lowest-capacity hop for that path.
In this context a “bottleneck” should not be seen as a problem to
be fixed, because any attempt to “fix” the bottleneck is futile --
such a “fix” can never remove the existence of a bottleneck
on a path; it just moves the bottleneck somewhere else.
Arguably, this heterogeneity of the Internet is one of its greatest strengths.
Allowing individual technologies to evolve and improve at their
own pace, without requiring the entire Internet to change in
lock-step, has enabled enormous improvements over the years
in technologies like DSL, cable modems, Ethernet, and Wi-Fi,
each advancing independently as new developments became ready.
As a result of this flexibility we have moved incrementally,
one step at a time, from 56kb/s dial-up modems in the 1990s to
Gb/s home Internet service and Gb/s wireless connectivity today.</t>

<t>Note that in a shared datagram network, conditions do not remain static.
The hop that is the current bottleneck may change from moment to moment.
For example, changes in other traffic may result in changes
to a flow’s share of a given hop. A user moving around
may cause the Wi-Fi transmission rate to vary widely,
from a few Mb/s when far from the Access Point,
all the way up to Gb/s or more when close to the Access Point.</t>

<t>Consequently, if we wish to enjoy the benefits of the Internet’s great
flexibility, we need software that embraces and celebrates this
diversity and adapts intelligently to the varying conditions it encounters.</t>

<t>Because significant queueing only happens on entry to the bottleneck
hop, the queue management at this critical hop of the path almost
entirely determines the responsiveness of the entire flow.
If the bottleneck hop’s queue management algorithm allows an
excessively large queue to form, this results in excessively large
delays for packets sitting in that queue awaiting transmission,
significantly degrading overall user experience.</t>

<t>In order to discover the depth of the buffer at the bottleneck hop,
the Responsiveness Test mimics normal network operations and data transfers,
to cause this bottleneck buffer to fill to capacity, and then
measures the resulting end-to-end latency under these operating conditions.
A well managed bottleneck queue keeps its queue occupancy
under control, resulting in consistently low round-trip time
and consistently good responsiveness.
A poorly managed bottleneck queue will not.</t>

</section>
<section anchor="goals"><name>Goals</name>

<t>The algorithm described here defines a Responsiveness Test that serves as a good
proxy for user experience. This means:</t>

<t><list style="numbers">
  <t>Today's Internet traffic primarily uses HTTP/2 over TLS.
Thus, the algorithm should use that protocol.  <vspace blankLines='1'/>
As a side note: other types of traffic are gaining in popularity (HTTP/3)
and/or are already being used widely (RTP).
Traffic prioritization and QoS rules on the Internet may
subject traffic to completely different paths:
these could also be measured separately.</t>
  <t>The Internet is marked by the deployment of countless middleboxes like
transparent TCP proxies or traffic prioritization for certain types of traffic.
The Responsiveness Test must take into account their effect on
TCP-handshake <xref target="RFC0793"/>, TLS-handshake, and request/response.</t>
  <t>The test result should be expressed in an intuitive, nontechnical form.</t>
  <t>Finally, to be useful to a wide audience, the measurement
should finish within a short time frame.
Our target is 20 seconds.</t>
</list></t>

</section>
<section anchor="measuring-responsiveness-under-working-conditions"><name>Measuring Responsiveness Under Working Conditions</name>

<t>To make an accurate measurement,
the algorithm must reliably put the network in a state
that represents those "working conditions".
During this process, the algorithm measures the responsiveness of the network.
The following explains how
the former and the latter are achieved.</t>

<section anchor="working-conditions"><name>Working Conditions</name>

<t>There are many different ways to define the state of "working conditions" to
measure responsiveness. There is no one true answer to this question. It is a
tradeoff between using realistic traffic patterns and pushing the network to
its limits.</t>

<t>The working conditions we try to achieve is a scenario where the path between the
measuring endpoints is utilized at its full end-to-end capacity and its full
buffer occupancy. An ideal
sender could send at just this link-speed without building a queue on the
bottleneck. Thus, in order to measure the worst-case responsiveness we need to
ensure that a queue is building up on the bottleneck, meaning that responsiveness
is at its worst.</t>

<t>In this document we aim to generate a realistic traffic pattern by
using standard HTTP transactions but exploring the worst-case scenario by creating
multiple of these transactions and using very large data objects in these HTTP
transactions.</t>

<t>This allows to create a stable state of working conditions during which the
bottleneck of the path between client and server has its buffer filled
up entirely, without generating DoS-like traffic
patterns (e.g., intentional UDP flooding). This creates a realistic traffic mix
representative of what a typical user’s network experiences in normal operation.</t>

<t>Finally, as end-user usage of the network evolves to newer protocols and congestion
control algorithms, it is important that the working conditions also can evolve
to continuously represent a realistic traffic pattern.</t>

<section anchor="single-flow-vs-multi-flow"><name>Single-flow vs multi-flow</name>

<t>A single TCP connection may not be sufficient
to reach the capacity and full buffer occupancy of a path quickly.
Using a 4MB receive window, over a network with a 32 ms round-trip time,
a single TCP connection can achieve up to 1Gb/s throughput.
Additionally, deep buffers along the path between the two endpoints may be
significantly larger than 4MB.
TCP allows larger receive window sizes, up to 1GB. However, most transport stacks
aggressively limit the size of the receive window to avoid consuming too much
memory.</t>

<t>Thus, the only way to achieve full capacity and full buffer occupancy on those
networks is by creating multiple connections, allowing to actively fill the
bottleneck's buffer to achieve maximum working conditions.</t>

<t>Even if a single TCP connection would be able to fill the bottleneck's buffer,
it may take some time for a single TCP connection to ramp
up to full speed. One of the goals of the Responsiveness test is to quickly
load the network, take its measurements, and then finish.
Finally, traditional loss-based TCP congestion control algorithms
react aggressively to packet loss by reducing the congestion window.
This reaction (intended by the protocol design) decreases the
queueing within the network, making it harder to determine the
depth of the bottleneck queue reliably.</t>

<t>The purpose of the Responsiveness Test is not to productively move data
across the network in a useful way, the way a normal application does.
The purpose of the Responsiveness Test is, as quickly as possible, to simulate
a representative traffic load as if real applications were doing
sustained data transfers, measure the resulting round-trip time
occurring under those realistic conditions, and then end the test.
Because of this, using multiple simultaneous parallel connections
allows the Responsiveness test to complete its task more quickly, in a way that
overall is less disruptive and less wasteful of network capacity
than a test using a single TCP connection that would take longer
to bring the bottleneck hop to a stable saturated state.</t>

<t>In this document, we impose an upper bound on the number of parallel load-generating
connections to 16.</t>

</section>
<section anchor="parallel-vs-sequential-uplink-and-downlink"><name>Parallel vs Sequential Uplink and Downlink</name>

<t>Poor responsiveness can be caused by queues in either (or both)
the upstream and the downstream direction.
Furthermore, both paths may differ significantly due to access link
conditions (e.g., 5G downstream and LTE upstream) or the routing changes
within the ISPs.
To measure responsiveness under working conditions,
the algorithm must explore both directions.</t>

<t>One approach could be to measure responsiveness in the uplink and downlink
in parallel. It would allow for a shorter test run-time.</t>

<t>However, a number of caveats come with measuring in parallel:</t>

<t><list style="symbols">
  <t>Half-duplex links may not permit simultaneous uplink and downlink traffic.
This means the test might not reach the path's capacity in both directions at once and thus not expose
all the potential sources of low responsiveness.</t>
  <t>Debuggability of the results becomes harder:
During parallel measurement it is impossible to differentiate whether
the observed latency happens in the uplink or the downlink direction.</t>
</list></t>

<t>Thus, we recommend testing uplink and downlink sequentially. Parallel testing
is considered a future extension.</t>

</section>
<section anchor="reaching-full-buffer-utilization"><name>Reaching full buffer utilization</name>

<t>The Responsiveness Test gradually increases the number of TCP connections
and measures "goodput" (the sum of actual data transferred across all connections in a unit of time)
continuously.
Once goodput reaches saturation, buffers will start filling up, creating the well-known
"standing queue" that is known as bufferbloat. This is the moment the test starts
measuring the responsiveness until the responsiveness reaches saturation as well.
At this point we are creating the worst-case scenario within the limits of the
realistic traffic pattern.</t>

<t>The algorithm notes that throughput increases rapidly until TCP
connections complete their TCP slow-start phase.
At that point, throughput eventually stalls,
often due to receive window limitations, particularly in cases of
high network bandwidth, high network round-trip time,
low receive window size, or a combination of all three.
The only means to further increase throughput is by
adding more TCP connections to the pool of load-generating connections.
If new connections leave the throughput the same,
full link utilization has been reached and -- more importantly --
the working condition is stable.</t>

</section>
</section>
<section anchor="test-parameters"><name>Test parameters</name>

<t>A number of parameters serve as input to the test methodology. The following lists
their names, default values and explanation. Hereafter the detailed description of the
methodology will explain how these parameters are being used.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Explanation</ttcol>
      <ttcol align='left'>Default Value</ttcol>
      <c>MAD</c>
      <c>Moving average distance (number of intervals to take into account for the moving average)</c>
      <c>4</c>
      <c>TMP</c>
      <c>Trimmed Mean Percentage to be removed</c>
      <c>95%</c>
      <c>SDT</c>
      <c>Standard Deviation Tolerance for stability detection</c>
      <c>5%</c>
      <c>ID</c>
      <c>Interval duration at which the algorithm reevaluates stability</c>
      <c>1 second</c>
      <c>MNP</c>
      <c>Maximum number of parallel transport-layer connections</c>
      <c>16</c>
      <c>MPS</c>
      <c>Maximum responsiveness probes per second</c>
      <c>100</c>
      <c>PTC</c>
      <c>Maximum percentage of total capacity the probes are allowed to consume</c>
      <c>5%</c>
</texttable>

</section>
<section anchor="measuring-responsiveness"><name>Measuring Responsiveness</name>

<t>Measuring responsiveness during the previously explained working conditions creation
is a continuous process during the duration of the test. It requires a sufficiently
large sample-size to have confidence in the results.</t>

<t>The measurement of the responsiveness happens by sending probe-requests for a small
object. There are two types of probe requests:</t>

<t><list style="numbers">
  <t>A HTTP GET request on a separate connection ("foreign probes").
This test mimics the time it takes for a web browser to connect to a new
web server and request the first element of a web page (e.g., “index.html”),
or the startup time for a video streaming client to launch and begin fetching media.</t>
  <t>A HTTP GET request multiplexed on the load-generating connections ("self probes").
This test mimics the time it takes for a video streaming client
to skip ahead to a different chapter in the same video stream,
or for a navigation client to react and fetch new map tiles
when the user scrolls the map to view a different area.
In a well functioning system fetching new data
over an existing connection should take less time than
creating a brand new TLS connection from scratch to do the same thing.</t>
</list></t>

<t>Foreign probes will provide 3 sets of data-points. First, the duration of the TCP-handshake
(noted hereafter as tcp_f).
Second, the TLS round-trip-time (noted tls_f). For this, it is important to note that different TLS versions
have a different number of round-trips. Thus, the TLS establishment time needs to be
normalized to the number of round-trips the TLS handshake takes until the connection
is ready to transmit data. And third, the HTTP elapsed time between issuing the GET
request for a 1-byte object and receiving the entire response (noted http_f).</t>

<t>Self probes will provide a single data-point for the duration of time between
when the HTTP GET request for the 1-byte object is issued on the load-generating connection and the
full HTTP response has been received (noted http_l).</t>

<t>tcp_f, tls_f, http_f and http_l are all measured in milliseconds.</t>

<t>The more probes that are sent, the more data is available for calculation. In order to generate
as much data as possible, the methodology requires a client to issue these probes regularly.
There is however a risk that on low-capacity networks the responsiveness probes
themselves will consume a significant amount of the capacity. As the test mandates to
first saturate capacity before probing for responsiveness, we are able to
accurately estimate how much of the capacity the responsiveness probes will consume.</t>

<t>This can be done by providing an estimate of the number of bytes exchanged for a
responsiveness probe. Taking TCP and TLS overheads into account, we can estimate
the amount of data exchanged for a probe on a foreign connection to be around 5000 bytes.
On load-generating connections we can expect an overhead of no more than 1000 bytes.</t>

<t>Given this information, we recommend that at each responsiveness probing round, we
send no more than 6 probes on different load-generating connections (choosing randomly among the available load-generating connections)
and 3 probes on foreign connections,
every 100ms for each type of probe.
This would result in a total amount of data per second of 210 KB or 1680Kb, meaning
a total capacity utilization of 1680 Kbps for the probing.</t>

<t>On high-speed networks, this will provide a significant amount of samples, while at
the same time minimizing the probing overhead.
However, on severely capacity-constrained networks the probing traffic could consume
a significant portion of the available capacity. We recommend to increase the probing
interval beyond 100ms and reduce the number of parallel probes appropriately
so that the probing traffic does not consume more than 5% of the available capacity.</t>

<section anchor="aggregating-the-measurements"><name>Aggregating the Measurements</name>

<t>The algorithm produces sets of 4 times for each probe, namely:
tcp_f, tls_f, http_f, http_l (from the previous section).
The responsiveness evolves over time as buffers gradually reach saturation. Once
the buffers are saturated responsiveness is stable over time. Thus, the aggregation
of the measurements considers the last 4 seconds worth of completed responsiveness probes.</t>

<t>Over the timeframe of 4 seconds a potentially large number of samples has been collected.
These may be affected by noise in the measurements, and outliers. Thus, to aggregate these
we suggest to use a trimmed mean at 95th percentile, thus providing the following numbers:
tcp_f_t95, tls_f_t95, http_f_t95, http_l_t95.</t>

<t>The responsiveness is then calculated as the weighted mean:</t>

<figure><artwork><![CDATA[
Responsiveness = 60000 /
(1/6*(tcp_f_t95 + tls_f_t95 + http_f_t95) +
  1/2*http_s_t95)
]]></artwork></figure>

<t>This responsiveness value presents round-trips per minute (RPM).</t>

</section>
</section>
<section anchor="final-algorithm"><name>Final Algorithm</name>

<t>Considering the previous two sections, where we explain what the meaning of
working conditions is and the definition of responsiveness, we can design the
final algorithm. In order to measure the worst-case latency we need to transmit
traffic at the full capacity of the path as well as ensure the buffers are filled
to the maximum.
We can achieve this by continuously adding HTTP sessions to the pool of connections
in a 1-second interval. This will ensure that we quickly reach capacity and full
buffer occupancy. First, the algorithm reaches stability for the goodput. Once
goodput stability has been achieved, responsiveness probes are being transmitted
until responsiveness stability is reached.</t>

<t>We consider both, goodput and responsiveness to be stable, when the standard deviation
of the past 4 moving averages is within 5% of the last of the moving averages.</t>

<t>The following algorithm reaches working conditions of a network
by using HTTP/2 upload (POST) or download (GET) requests of infinitely large
files.
The algorithm is the same for upload and download and uses
the same term "load-generating connection" for each.
The actions of the algorithm take place at regular intervals. For the current draft
the interval is defined as one second.</t>

<t>Where</t>

<t><list style="symbols">
  <t>i: The index of the current interval. The variable i is initialized to 0 when the algorithm begins and
increases by one for each interval.</t>
  <t>moving average aggregate goodput at interval p: The number of total bytes of data transferred within
interval p and the three immediately preceding intervals, divided by four times the interval duration.</t>
</list></t>

<t>the steps of the algorithm are:</t>

<t><list style="symbols">
  <t>Create a load-generating connection.</t>
  <t>At each interval:
  <list style="symbols">
      <t>Create an additional load-generating connection.</t>
      <t>If goodput has not saturated:
      <list style="symbols">
          <t>Compute the moving average aggregate goodput at interval i as current_average.</t>
          <t>If the standard deviation of the past 4 average goodput values is less than 5% of the current_average, declare saturation and move on to probe responsiveness.</t>
        </list></t>
      <t>If goodput has saturated:
      <list style="symbols">
          <t>Compute the responsiveness at interval i as current_responsiveness.</t>
          <t>If the standard deviation of the past 4 responsiveness values is less than 5% of the current_responsiveness, declare saturation and report current_responsiveness.</t>
        </list></t>
    </list></t>
</list></t>

<t>In <xref target="goals"/>, it is mentioned that one of the goals is that the test finishes within
20 seconds. It is left to the implementation what to do when stability is not reached
within that time-frame. For example, an implementation might gather a provisional
responsiveness measurement or let the test run for longer.</t>

<t>Finally, if at any point one of these connections terminates with an error, the test should be aborted.</t>

<section anchor="confidence-of-test-results"><name>Confidence of test-results</name>

<t>As described above, a tool running the algorithm typically defines a time-limit for
the execution of each of the stages. For example, if the tool allocates a total
run-time of 40 seconds, and it executes a full downlink followed by a uplink test,
it may allocate 10 seconds to each of the saturation-stages (downlink capacity saturation, downlink responsiveness saturation, uplink capacity saturation, uplink responsiveness saturation).</t>

<t>As the different stages may or may not reach stability, we can define a "confidence score"
for the different metrics (capacity and responsiveness) the methodology was able to measure.</t>

<t>We define "Low" confidence in the result if the algorithm was not even able to
execute 4 iterations of the specific stage. Meaning, the moving average is
not taking the full window into account.</t>

<t>We define "Medium" confidence if the algorithm was able to execute at least 4
iterations, but did not reach stability based on standard deviation tolerance.</t>

<t>We define "High" confidence if the algorithm was able to fully reach stability
based on the define standard deviation tolerance.</t>

</section>
</section>
</section>
<section anchor="interpreting-responsiveness-results"><name>Interpreting responsiveness results</name>

<t>The described methodology uses a high-level approach to measure responsiveness.
By executing the test with regular HTTP requests a number of elements come into
play that will influence the result. Contrary to more traditional measurement methods
the responsiveness metric is not only influenced by the properties of the
network but can significantly be influenced by the properties of the client
and the server implementations. This section describes how the different
elements influence responsiveness and how a user may differentiate them
when debugging a network.</t>

<section anchor="elements-influencing-responsiveness"><name>Elements influencing responsiveness</name>

<t>Due to the HTTP-centric approach of the measurement methodology a number of
factors come into play that influence the results. Namely, the client-side
networking stack (from the top of the HTTP-layer all the way down to the physical layer),
the network (including potential transparent HTTP "accelerators"), and the server-side
networking stack. The following outlines how each of these contributes to the responsiveness.</t>

<section anchor="client-side-influence"><name>Client side influence</name>

<t>As the driver of the measurement, the client-side networking stack can have a
large influence on the result. The biggest influence of the client comes
when measuring the responsiveness in the uplink direction. Load-generation will
cause queue-buildup in the transport layer as well as the HTTP layer. Additionally,
if the network's bottleneck is on the first hop, queue-buildup will happen at the
layers below the transport stack (e.g., NIC firmware).</t>

<t>Each of these queue build-ups may cause latency and thus low responsiveness.
A well designed networking stack would ensure that queue-buildup in the TCP layer
is kept at a bare minimum with solutions like TCP_NOTSENT_LOWAT <xref target="draft-ietf-tcpm-rfc793bis"/>.
At the HTTP/2 layer it is important that the load-generating data is not interfering
with the latency-measuring probes. For example, the different streams should not
be stacked one after the other but rather be allowed to be multiplexed for
optimal latency. The queue-buildup at these layers would only influence latency
on the probes that are sent on the load-generating connections.</t>

<t>Below the transport layer many places have a potential queue build-up. It is
important to keep these queues at reasonable sizes or that they implement techniques
like FQ-Codel. Depending on the techniques used at these layers, the queue build-up
can influence latency on probes sent on load-generating connections as well as
separate connections. If flow-queuing is used at these layers, the impact on
separate connections will be negligible.</t>

</section>
<section anchor="network-influence"><name>Network influence</name>

<t>The network obviously is a large driver for the responsiveness result.
Propagation delay from the client to the server as well as queuing in the
bottleneck node will cause latency. Beyond these traditional sources of latency,
other factors may influence the results as well. Many networks deploy transparent
TCP Proxies, firewalls doing deep packet-inspection, HTTP "accelerators",...
As the methodology relies on the use of HTTP/2, the responsiveness metric will
be influenced by such devices as well.</t>

<t>The network will influence both kinds of latency probes that the responsiveness
tests sends out. Depending on the network's use of Smart Queue Management and whether
this includes flow-queuing or not, the latency probes on the load-generating
connections may be influenced differently than the probes on the separate
connections.</t>

</section>
<section anchor="server-side-influence"><name>Server side influence</name>

<t>Finally, the server-side introduces the same kind of influence on the responsiveness
as the client-side, with the difference that the responsiveness will be impacted
during the downlink load generation.</t>

</section>
</section>
<section anchor="root-causing-responsiveness"><name>Root-causing Responsiveness</name>

<t>Once a responsiveness result has been generated one might be tempted to try to localize
the source of a potential low responsiveness. The responsiveness measurement
is however aimed at providing a quick, top-level view of the responsiveness
under working conditions the way end-users experience it.
Localizing the source of low responsiveness involves however a set of different
tools and methodologies.</t>

<t>Nevertheless, the responsiveness test allows to gain some insight into what the
source of the latency is. The previous section described the elements that influence
the responsiveness. From there it became apparent that the latency measured
on the load-generating connections and the latency measured on separate connections
may be different due to the different elements.</t>

<t>For example, if the latency measured on separate connections is much less than the
latency measured on the load-generating connections, it is possible to narrow
down the source of the additional latency on the load-generating connections.
As long as the other elements of the network don't do flow-queueing, the additional
latency must come from the queue build-up at the HTTP and TCP layer.
This is because all other bottlenecks in the network that may cause a queue build-up
will be affecting the load-generating connections as well as the separate latency
probing connections in the same way.</t>

</section>
</section>
<section anchor="responsiveness-test-server-api"><name>Responsiveness Test Server API</name>

<t>The responsiveness measurement is built upon a foundation of standard protocols:
IP, TCP, TLS, HTTP/2.
On top of this foundation, a minimal amount of new “protocol” is defined,
merely specifying the URLs that used for GET and PUT in the process of
executing the test.</t>

<t>Both the client and the server MUST support HTTP/2 over TLS.
The client MUST be able to send a GET request and a POST.
The server MUST be able to respond to both of these
HTTP commands.
The server MUST have the ability to provide content upon a GET request.
The server MUST use a packet scheduling algorithm that minimizes internal queueing
to avoid affecting the client's measurement.</t>

<t>As clients and servers become deployed that use L4S congestion control
(e.g., TCP Prague with ECT(1) packet marking),
for their normal traffic when it is available, and fall back
to traditional loss-based congestion controls (e.g., Reno or CUBIC)
otherwise, the same strategy SHOULD be used for responsiveness test traffic.
This is RECOMMENDED so that the synthetic traffic generated
by the responsiveness test mimics real-world traffic for that server.</t>

<t>Delay-based congestion-control algorithms (e.g., Vegas, FAST, BBR)
SHOULD NOT be used for responsiveness test traffic because they take
much longer to discover the depth of the bottleneck buffers.
Delay-based congestion-control algorithms seek to mitigate the
effects of bufferbloat, by detecting and responding to early signs
of increasing round-trip delay, and reducing the amount of data they
have in flight before the bottleneck buffer fills up and overflows.
In a world where bufferbloat is common, this is a pragmatic
mitigation to allow software to work better in that environment.
However, that approach does not fix the underlying problem of bufferbloat;
it merely avoids it in some cases,
and allows the problem in the network to persist.
For a diagnostic tool made to identify symptoms of bufferbloat in the
network so that they can be fixed, using a transport protocol explicitly
designed to mask those symptoms would be a poor choice, and would
require the test to run for much longer to deliver the same results.</t>

<t>The server MUST respond to 4 URLs:</t>

<t><list style="numbers">
  <t>A "small" URL/response:
The server must respond with a status code of 200 and 1 byte in the body.
The actual message content is irrelevant.
The server SHOULD specify the content-type as application/octet-stream.
The server SHOULD minimize the size, in bytes, of the response fields that are encoded and sent on the wire.</t>
  <t>A "large" URL/response:
The server must respond with a status code of 200 and a body size of at least 8GB.
The server SHOULD specify the content-type as application/octet-stream.
The body can be bigger, and may need to grow as network speeds increases over time.
The actual message content is irrelevant.
The client will probably never completely download the object,
but will instead close the connection after reaching working condition
and making its measurements.</t>
  <t>An "upload" URL/response:
The server must handle a POST request with an arbitrary body size.
The server should discard the payload.
The actual POST message content is irrelevant.
The client will probably never completely upload the object,
but will instead close the connection after reaching working condition
and making its measurements.</t>
  <t>A .well-known URL <xref target="RFC8615"/> which contains configuration information for 
the client to run the test (See <xref target="discovery"/>, below.)</t>
</list></t>

<t>The client begins the responsiveness measurement by querying for the JSON <xref target="RFC8259"/> configuration.
This supplies the URLs for creating the load-generating connections in
the upstream and downstream direction as well as the small object
for the latency measurements.</t>

</section>
<section anchor="discovery"><name>Responsiveness Test Server Discovery</name>

<t>It makes sense for a service provider (either an application service provider like a video conferencing service
or a network access provider like an ISP) to host Responsiveness Test Server instances on their
network so customers can determine what to expect about the quality of their connection to 
the service offered by that provider.
However, when a user performs a Responsiveness test and determines
that they are suffering from poor responsiveness during the connection to that service,
the logical next questions might be,</t>

<t><list style="numbers">
  <t>"What’s causing my poor performance?"</t>
  <t>"Is it poor buffer management by my ISP?"</t>
  <t>"Is it poor buffer management in my home Wi-Fi Access point?"</t>
  <t>"Something to do with the service provider?"</t>
  <t>"Something else entirely?”</t>
</list></t>

<t>To help an end user answer these questions, it will be useful for test clients
to be able to easily discover Responsiveness Test Server instances running in various
places in the network (e.g., their home router, their Wi-Fi access point, their ISP's
head-end equipment, etc).</t>

<t>Consider this example scenario: A user has a cable modem
service offering 100 Mb/s download speed, connected via
gigabit Ethernet to one or more Wi-Fi access points in their home,
which then offer service to Wi-Fi client devices at different rates
depending on distance, interference from other traffic, etc.
By having the cable modem itself host a Responsiveness Test Server instance,
the user can then run a test between the cable modem and their computer
or smartphone, to help isolate whether bufferbloat they are experiencing
is occurring in equipment inside the home (like their Wi-Fi access points)
or somewhere outside the home.</t>

<section anchor="well-known-uniform-resource-identifier-uri-for-test-server-discovery"><name>Well-Known Uniform Resource Identifier (URI) For Test Server Discovery</name>

<t>Any organization that wishes to host their own instance of a Responsiveness Test Server can advertise that capability
by hosting at the network quality well-known URI a resource whose content type is application/json and contains a valid JSON object meeting the 
following criteria:</t>

<figure><artwork><![CDATA[
{
  "version": 1,
  "urls": {
    "large_download_url":"https://nq.example.com/api/v1/large",
    "small_download_url":"https://nq.example.com/api/v1/small",
    "upload_url":        "https://nq.example.com/api/v1/upload"
  }
  "test_endpoint": "hostname123.provider.com"
}
]]></artwork></figure>

<t>The server SHALL specify the content-type of the resource at the well-known URI as application/json.</t>

<t>The content of the "version" field SHALL be "1". Integer values greater than "1" are reserved
for future versions of this protocol.
The content of the "large_download_url", "small_download_url", and "upload_url" SHALL
all be validly formatted "http" or "https" URLs. See above for the semantics of the fields.
All of the fields in the sample configuration are required except "test_endpoint".
If the test server provider can pin all of the requests for a test run to a specific
host in the service (for a particular run), they can specify that host name in the
"test_endpoint" field.</t>

<t>For purposes of registration of the well-known URI <xref target="RFC8615"/>, the application name is "nq". The media type
of the resource at the well-known URI is "application/json" and the format of the resource is as specified
above. The URI scheme is "https". No additional path components, query strings or fragments are valid
for this well-known URI.</t>

</section>
<section anchor="dns-based-service-discovery-for-test-server-discovery"><name>DNS-Based Service Discovery for Test Server Discovery</name>

<t>To further aid the test client in discovering instances of the Responsiveness Test Server, organizations
wishing to host their own instances of the Test Server MAY advertise their availability using
DNS-Based Service Discovery <xref target="RFC6763"/> using conventional, unicast DNS <xref target="RFC1034"/> or multicast DNS <xref target="RFC6762"/>
on the organization network's local link(s).</t>

<t>The Responsiveness Test Service instances should advertise using the service type <xref target="RFC6335"/> 
"_nq._tcp".  Population of the appropriate DNS zone with the
relevant unicast discovery records can be performed
automatically using a Discovery Proxy <xref target="RFC8766"/>,
or in some scenarios simply by having a human
administrator manually enter the required records.</t>

<section anchor="example"><name>Example</name>

<t>An obscure service provider hosting a Responsiveness Test Server instance for their
organization (obs.cr) on the "rpm.obs.cr" host would return the following answers
to PTR and SRV conventional DNS queries:</t>

<figure><artwork><![CDATA[
$ nslookup -q=ptr _nq._tcp.obs.cr.
Non-authoritative answer:
_nq._tcp.obs.crname = rpm._nq._tcp.obs.cr.
$ nslookup -q=srv rpm._nq._tcp.obs.cr.
Non-authoritative answer:
rpm._nq._tcp.obs.crservice = 0 0 443 rpm.obs.cr.
]]></artwork></figure>

<t>Given those conventional DNS query responses, the client would proceed to access the rpm.obs.cr
host on port 443 at the .well-known/nq well-known URI to begin the test.</t>

</section>
</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TBD</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA has been requested to record the service type
“_nq._tcp” (Network Quality)
for advertising and discovery of Responsiveness Test Server instances.</t>

</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>Special thanks go to Will Hawkins and Jeroen Schickendantz for their tireless
enthousiasm around the project and their contributions to this I-D and the development
of the Go responsiveness measurement tool.
We would also like to thank Rich Brown for his editorial pass over this I-D.
We also thank Erik Auerswald for his constructive feedback on the I-D.</t>

</section>


  </middle>

  <back>



    <references title='Informative References'>

<reference anchor="Bufferbloat" >
  <front>
    <title>Bufferbloat: Dark Buffers in the Internet</title>
    <author initials="J." surname="Gettys">
      <organization></organization>
    </author>
    <author initials="K." surname="Nichols">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="Communications of the ACM, Volume 55, Number 1 (2012)" value=""/>
</reference>
<reference anchor="draft-ietf-tcpm-rfc793bis" >
  <front>
    <title>Transmission Control Protocol (TCP) Specification</title>
    <author initials="W." surname="Eddy">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="Internet Engineering Task Force" value=""/>
</reference>




<reference anchor='RFC0793' target='https://www.rfc-editor.org/info/rfc793'>
<front>
<title>Transmission Control Protocol</title>
<author fullname='J. Postel' initials='J.' surname='Postel'><organization/></author>
<date month='September' year='1981'/>
</front>
<seriesInfo name='RFC' value='793'/>
<seriesInfo name='DOI' value='10.17487/RFC0793'/>
</reference>



<reference anchor='RFC1034' target='https://www.rfc-editor.org/info/rfc1034'>
<front>
<title>Domain names - concepts and facilities</title>
<author fullname='P. Mockapetris' initials='P.' surname='Mockapetris'><organization/></author>
<date month='November' year='1987'/>
<abstract><t>This RFC is the revised basic definition of The Domain Name System.  It obsoletes RFC-882.  This memo describes the domain style names and their used for host address look up and electronic mail forwarding.  It discusses the clients and servers in the domain name system and the protocol used between them.</t></abstract>
</front>
<seriesInfo name='STD' value='13'/>
<seriesInfo name='RFC' value='1034'/>
<seriesInfo name='DOI' value='10.17487/RFC1034'/>
</reference>



<reference anchor='RFC6335' target='https://www.rfc-editor.org/info/rfc6335'>
<front>
<title>Internet Assigned Numbers Authority (IANA) Procedures for the Management of the Service Name and Transport Protocol Port Number Registry</title>
<author fullname='M. Cotton' initials='M.' surname='Cotton'><organization/></author>
<author fullname='L. Eggert' initials='L.' surname='Eggert'><organization/></author>
<author fullname='J. Touch' initials='J.' surname='Touch'><organization/></author>
<author fullname='M. Westerlund' initials='M.' surname='Westerlund'><organization/></author>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<date month='August' year='2011'/>
<abstract><t>This document defines the procedures that the Internet Assigned Numbers Authority (IANA) uses when handling assignment and other requests related to the Service Name and Transport Protocol Port Number registry.  It also discusses the rationale and principles behind these procedures and how they facilitate the long-term sustainability of the registry.</t><t>This document updates IANA's procedures by obsoleting the previous UDP and TCP port assignment procedures defined in Sections 8 and 9.1 of the IANA Allocation Guidelines, and it updates the IANA service name and port assignment procedures for UDP-Lite, the Datagram Congestion Control Protocol (DCCP), and the Stream Control Transmission Protocol (SCTP).  It also updates the DNS SRV specification to clarify what a service name is and how it is registered.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='165'/>
<seriesInfo name='RFC' value='6335'/>
<seriesInfo name='DOI' value='10.17487/RFC6335'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC8615' target='https://www.rfc-editor.org/info/rfc8615'>
<front>
<title>Well-Known Uniform Resource Identifiers (URIs)</title>
<author fullname='M. Nottingham' initials='M.' surname='Nottingham'><organization/></author>
<date month='May' year='2019'/>
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.</t><t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space.  It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t></abstract>
</front>
<seriesInfo name='RFC' value='8615'/>
<seriesInfo name='DOI' value='10.17487/RFC8615'/>
</reference>



<reference anchor='RFC8766' target='https://www.rfc-editor.org/info/rfc8766'>
<front>
<title>Discovery Proxy for Multicast DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document specifies a network proxy that uses Multicast DNS to automatically populate the wide-area unicast Domain Name System namespace with records describing devices and services found on the local link.</t></abstract>
</front>
<seriesInfo name='RFC' value='8766'/>
<seriesInfo name='DOI' value='10.17487/RFC8766'/>
</reference>



<reference anchor='RFC8290' target='https://www.rfc-editor.org/info/rfc8290'>
<front>
<title>The Flow Queue CoDel Packet Scheduler and Active Queue Management Algorithm</title>
<author fullname='T. Hoeiland-Joergensen' initials='T.' surname='Hoeiland-Joergensen'><organization/></author>
<author fullname='P. McKenney' initials='P.' surname='McKenney'><organization/></author>
<author fullname='D. Taht' initials='D.' surname='Taht'><organization/></author>
<author fullname='J. Gettys' initials='J.' surname='Gettys'><organization/></author>
<author fullname='E. Dumazet' initials='E.' surname='Dumazet'><organization/></author>
<date month='January' year='2018'/>
<abstract><t>This memo presents the FQ-CoDel hybrid packet scheduler and Active Queue Management (AQM) algorithm, a powerful tool for fighting bufferbloat and reducing latency.</t><t>FQ-CoDel mixes packets from multiple flows and reduces the impact of head-of-line blocking from bursty traffic.  It provides isolation for low-rate traffic such as DNS, web, and videoconferencing traffic.  It improves utilisation across the networking fabric, especially for bidirectional traffic, by keeping queue lengths short, and it can be implemented in a memory- and CPU-efficient fashion across a wide range of hardware.</t></abstract>
</front>
<seriesInfo name='RFC' value='8290'/>
<seriesInfo name='DOI' value='10.17487/RFC8290'/>
</reference>



<reference anchor='RFC8033' target='https://www.rfc-editor.org/info/rfc8033'>
<front>
<title>Proportional Integral Controller Enhanced (PIE): A Lightweight Control Scheme to Address the Bufferbloat Problem</title>
<author fullname='R. Pan' initials='R.' surname='Pan'><organization/></author>
<author fullname='P. Natarajan' initials='P.' surname='Natarajan'><organization/></author>
<author fullname='F. Baker' initials='F.' surname='Baker'><organization/></author>
<author fullname='G. White' initials='G.' surname='White'><organization/></author>
<date month='February' year='2017'/>
<abstract><t>Bufferbloat is a phenomenon in which excess buffers in the network cause high latency and latency variation.  As more and more interactive applications (e.g., voice over IP, real-time video streaming, and financial transactions) run in the Internet, high latency and latency variation degrade application performance.  There is a pressing need to design intelligent queue management schemes that can control latency and latency variation, and hence provide desirable quality of service to users.</t><t>This document presents a lightweight active queue management design called &quot;PIE&quot; (Proportional Integral controller Enhanced) that can effectively control the average queuing latency to a target value. Simulation results, theoretical analysis, and Linux testbed results have shown that PIE can ensure low latency and achieve high link utilization under various congestion situations.  The design does not require per-packet timestamps, so it incurs very little overhead and is simple enough to implement in both hardware and software.</t></abstract>
</front>
<seriesInfo name='RFC' value='8033'/>
<seriesInfo name='DOI' value='10.17487/RFC8033'/>
</reference>



<reference anchor='RFC8259' target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author fullname='T. Bray' initials='T.' role='editor' surname='Bray'><organization/></author>
<date month='December' year='2017'/>
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>


<section anchor="example-server-configuration"><name>Example Server Configuration</name>

<t>This section shows fragments of sample server configurations to host an responsiveness
measurement endpoint.</t>

<section anchor="apache-traffic-server"><name>Apache Traffic Server</name>

<t>Apache Traffic Server starting at version 9.1.0 supports configuration as a responsiveness
server. It requires the generator and the statichit plugin.</t>

<t>The sample remap configuration file then is:</t>

<figure><artwork><![CDATA[
map https://nq.example.com/api/v1/config \
    http://localhost/ \
    @plugin=statichit.so \
    @pparam=--file-path=config.example.com.json \
    @pparam=--mime-type=application/json

map https://nq.example.com/api/v1/large \
    http://localhost/cache/8589934592/ \
    @plugin=generator.so

map https://nq.example.com/api/v1/small \
    http://localhost/cache/1/ \
    @plugin=generator.so

map https://nq.example.com/api/v1/upload \
    http://localhost/ \
    @plugin=generator.so
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAL+KD2QAA9V96ZIjx5Hm/3iKXGjXWDUDoKv6ErvGaKPqg2SPupulrqJo
aztrtERmAEhVIhPMo9AQxTG+xpppXo5Psv65exyZQDVbu7I1reZQdSIzDg8P
98+P8JjNZqYrutJeJO9tu62rtrizlW3bpK9y2yTf1c1tUa2SF3WVF11Bv5t0
sWjs3ae/n9dZlW6og7xJl92ssN1yVmy3m1kzaGB2dm7ytLMXJqP/v6qb/UXS
drkxbb/YFG1Lbd3st9TM61c3X5qszqmbi6Snxj43xba5SLqmb7uHZ2fPzh6a
tLHpRXLTpBV10XRmR8NaNXW/pc+vkivbLOtmk1aZTd7atO0bu7FVZ27tnl7M
6Z2qs01lu9lLDJmG0KVV/n1a1hX1v7et2RYXyf/o6myatNR8Y5ct/bXf4I//
aUzad+u6uTBJMqP/S5Kiai+SF/PkKk3bbM2PhCIv1k3RdvV2Hf9UNzSvy+22
tDSObM7PWurDdhfJN5XVn67S5jb5Lt3zz1nREbVe9FvbdEVVT5MXaVnQFKsi
TZ49OTt/LG/VfdWBrN9WRWfz5LojQrdJvUwuN7YpspTfspu0KC+SbMsj+l2K
3uZZvTHD6byfE+n2tolm856IlJZl9PwfYypNs7l3GtdzWgTbrovGRjO57vq0
6Ya//GPMJdMh3Tuhb+bJ9TrdFk0azecbamjw+B9jMjXN5d6JfDdPvk53JEza
aCLfFcRf8WOeCPV1Z5uWBoiOXhRVVlRV2hVxX2v+aLf+XZ/hwbzP5jbvR32+
JaZOu3URd0kPuvgp9/hVXa9KOwXxBrQ7f3p2RjPdrotubVN6yDTcDUj4FiRK
iyr5Y2F3RMbLJHn2+Ozxo7+dfhsa2oZH9rsVD0jIWFQs3ToiCmTQ8365tM2i
rNPugr8O4on+M5OZ/9s8+cp23b4dPP39PHlXZOu6lMeqKCZxi8lLMIk8aemr
hCbu5edEiEMDty1GRfxTbzZ9RfNg3YB54f3LF2+nyR/rst/Y5MmTafKu3yyI
Y8+Tk4dn5w9PqZVId3QZdMcy++2zR4uivX9KxECv8nw/GDlrBNUm0FFdU5fJ
VVOTKKc/Tm5eXJ0m11ubFUsd4uEM3NySV9WqqCz9QuruJm1vky/rJoOseP/l
izMa3IX8eX726LH++fTRoyfuz98+fRj+dO9+/vTcvfD5b58+dX8+fHbm/jx7
5N99+OTZhTGz2SxJF8R/aUaKioZAXFHtSUmlDemkNCnT7BZkHirbaXKXNkXd
t+U+yUhm29yU6WpKb3e2yvZT4vJkEVZ5StunTRbWVtROVq+q4s/0BT1KK9L7
xG1dT/uN9sOi74iFN5u6Yn247eoN80Sdp/vP2oTIBk3czs0rGkdCS0qrnCa5
zdLcYpT4NaGlYYWbNnnxZ1C3s9kaPFOSti175pypKToaC+0D4qJU+0y2Tb0o
7SahETFf2SpPelo86hA9NntS4Mnktqp37YReSLuEWinaZFJhw5QT/jBN7orc
1tRmRfO3AAldbdbpnXXtt8luTcNv641d1Pk+sWVrE2psTQ+oObNLu2yNgafJ
498nm/qusCBovyVaArYk2zVxXJssGyIPjbNo8KSyc/N1vbM0zimeNmgrqepo
+oRqWpqmTI9+7GpaFJ5plrb0+Wv6jfjAr27yQ297C45IVwxxAgGTk+UP3xOK
suWUPr6ltbt6/epUpkkv3ZHsQbs6Y6LfN33j108pT2sf2GpKQ+1kSoHrjq4c
mKRJMcPozXRHmI2BpMoEt5bECLRKbWhgbr6zNO2yIErJImZEl07o3dW0j3fr
mhZkE5AdJCU0Z7K1NWmbz1oDKu+JKRP7YYvNjVXeQblwW0LTymY0nrTZh8FN
DYZDk+7LDowN3t3gEZaERpz3GQ2VB8VEHNHwBotGeLiXtRBBY1t+azLC0ze2
7YQhZSKY33AT03p3YO82Yn8WZC0TbUO0T6ui3TCfKDV4O5ho0q2TdiWJAmZr
mTovNBhQcP1OcX3mcf2cZjMkMr1MDdMYW2IeEg6T96TM8lnXFNsWmDt5W1R9
ZyfJyfurt6dMyXZd92UOJialXfY5fbgj1UljILC+Wm+JU076LU8nr3fVKf4y
RU7YRCUV+skaGhF4rKCxkdiuG2YiN4cfegIq3X4usnJT5PS5Mb+BIJcFo9n8
fyM5kx9/jLTvTz/NzbXf0WVxaxO3q+lFVR0//YQx0e7WR6RC6BFvdB5XkLUY
GVGaeB0cA/FGC9phaXckEWnCxYZ2D9ba5nPzDnuImKVkqsjOosawiVoeogiD
iBi0BJclKWpa2aQtiBbgu6pjaYe2SXRB+INF431J77CYg+4uaHX3CYxWlt7U
MWSDpS6yTsRll6QlAa6WpHhb0L7DVNA+WiXRQRyOcdP6RjxOHdPy0gQXFkze
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
umYTk+jIltaU2h75zBpY8J5IXxLswry+moKcXL9zqgiE02u9dwUl2X0zU769
q2KbJWRQ4oDILz//1TWLIv4hWj41G8mIFBfz3pHz2/dvVEwwCgb6RI4+1vfq
2xtHHXcWrV6aQ3cl7JVatWJUHi4CoW+/vb4hfLRlO+agyO1N+I5fjGosSfHC
wakBLtedICdCvoy7iL6U5RGDr+6CMW+YfZGgmXIK/7iJtTvY63zYElnl1FW+
qKHyyxqN6rAd4WitdtQimteXw7QQvdJGriKS2uNN5Yw4wChfjWu4AYRUnw1Y
TsIrx26U0WspBFy7+CYG9+bx9ZECTkYdIoK801WvFTRevbg5OT9180EZXRrO
6dRFXnBCWKoRufQr9jeJWPT5peKqW0I4LKghI2lbx6pLHQ7MF0h5b1EftEle
fPv89YtTMTp2RaseA97GSPTtLOH766+/+fbNS61Jmx85I6C1ewYlPOh/3796
8c3bt6/evXz1MonTa9t9Rf8Vn/f3KMssjp4ZiM/KoVrAjCRfmfvP/Y0gsly0
jC9h0x1QYXZYX8vR4492lZIG+vLy+maaPH/+/tTorN99c/OpM/dym+19voFK
NCOHfn+lPvq4TDnuK/rkSbTW8g1vG2IClyxqrF5CNLyNaQojS08188kKF8+T
1FBEQFGjAE621jC65+ScUUEptpmnIdfaB4uHOfMghJwqwwHLUtHzsnZZgge1
2ZEr2Lq7ZkEpaN1W78aRRZfkyvh+qcJdDK2J8nItJG07HHnIjBJFj2BIPZxw
xUEtd7HLvYG+Rr6t7oqmrkQoRBdRwQXlYgg+K3xZfBDLFwC73DtfHG6WGdL+
Xzj4LAqEZRLfgeAQLNeEkMvgoipZrqWx1q+RtIoS73ojE24IWVW1lNFAMH2D
q+aROo8LTEhVuduWD67nUkeGaznaqXt3IkevxnH1sYI3zVeOC1f7Ge+h5TuB
+CQUKlr57kMJQLm7M1vXRaZSTS4B0lNYXjWyJtI8ivGOsmXhNlQrl7HE569j
XRLpssessN356AmfrZ7gmS/vfRF/rnWr5XOtkokiXj0YL2c4+vBMLqA75xwz
t1qLOt/7bL6ew4It1zl1OhDc2uBaFtyNOVB/Kn4UZ4jKko9mfIglbeNCcQ9q
sozJuGb/7rF2Bpf1Sa0QVExCPtx0ZC9iuW2ZRx5X3NKRa6WN2PuKG2Xmek56
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
4daSpgAA

-->

</rfc>

